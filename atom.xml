<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名無声</title>
  
  <subtitle>迷子でもいい、迷子でも進め</subtitle>
  <link href="https://alphardex.github.io/mygo/atom.xml" rel="self"/>
  
  <link href="https://alphardex.github.io/mygo/"/>
  <updated>2024-10-06T15:04:28.153Z</updated>
  <id>https://alphardex.github.io/mygo/</id>
  
  <author>
    <name>alphardex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>国庆上海 2 日游——二次元之旅</title>
    <link href="https://alphardex.github.io/mygo/posts/17054/"/>
    <id>https://alphardex.github.io/mygo/posts/17054/</id>
    <published>2024-10-06T14:11:00.000Z</published>
    <updated>2024-10-06T15:04:28.153Z</updated>
    
    
    <summary type="html">&lt;p&gt;这个国庆我原本想七天都宅在家里的，但后来我还是改变了主意，决定去外面看一看。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>我的 MyGO!!!!!上海演唱会抢票历程</title>
    <link href="https://alphardex.github.io/mygo/posts/59816/"/>
    <id>https://alphardex.github.io/mygo/posts/59816/</id>
    <published>2024-09-19T12:45:00.000Z</published>
    <updated>2024-09-19T12:45:32.881Z</updated>
    
    
    <summary type="html">&lt;p&gt;当我得知我喜欢的乐队 MyGO!!!!!将于上海开演唱会时，我内心十分激动。然而，票务代理却是臭名昭著的 EUPD，他们以放票少，官牛多而出名，让无数抢不到票的粉丝伤透了心。&lt;/p&gt;
&lt;p&gt;当抢票信息公布后，我并不打算直接用手机去抢票，因为这样成功率实在是太低了，感觉就跟原神无保底单抽出金的概率差不多吧。&lt;/p&gt;
&lt;p&gt;作为一个还算懂点技术的人，我决定利用我平时所学，打造出几个抢票利器，来助我一臂之力。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>将TUIKit从uni-app迁移到taro</title>
    <link href="https://alphardex.github.io/mygo/posts/36637/"/>
    <id>https://alphardex.github.io/mygo/posts/36637/</id>
    <published>2024-06-18T09:15:10.000Z</published>
    <updated>2024-06-26T01:31:34.613Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/document/product/269/64506&quot;&gt;TUIKit&lt;/a&gt;是腾讯的一个基于 Chat SDK 的 UI 组件库，目前支持 H5、小程序、uni-app，但并没有对 Taro 的支持。&lt;/p&gt;
&lt;p&gt;由于我的项目是基于 Taro 的，因此我先要把它 uni-app 的版本迁移到 Taro 上去。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>从零开始的 cosplay 之旅</title>
    <link href="https://alphardex.github.io/mygo/posts/63891/"/>
    <id>https://alphardex.github.io/mygo/posts/63891/</id>
    <published>2024-05-22T00:16:23.000Z</published>
    <updated>2024-05-21T12:46:14.140Z</updated>
    
    
    <summary type="html">&lt;p&gt;这里是 alphardex。&lt;/p&gt;
&lt;p&gt;最近我想做一件事情，这件事情是我之前一直想做，但迟迟未能落成的事，那就是——cosplay！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cosplay 是一种潮流，它源自日本，指的是模仿并扮演动画、漫画、游戏（简称 ACG）等虚构作品中角色的活动。参与者通常会精心设计自己的服装和化妆，以尽可能地还原原作中角色的外貌和特点。这不仅是一种娱乐活动，也是一种表达对喜爱作品的热情和尊重的方式。无论是在展会、活动中，还是在社交媒体上，cosplay 都是一种展示个人创意和爱好的方式。（By ChatGPT）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一个宅龄十年的 ACG 爱好者，不玩一次 cosplay 真的是有点对不住这个身份。&lt;/p&gt;
&lt;p&gt;记得在学校读书的那个时候，不仅没钱，而且还被各种作业和考试压迫，但现在就不一样了，钱是足够的，并且下班回家后还相对比较自由，在这些条件下，为什么不试着大干一把呢？&lt;/p&gt;
&lt;p&gt;本文就暂时不谈技术了，专门讲讲我探索 cosplay 的过程。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SU7，启动！尝试还原了 SU7 网页的炫酷特效</title>
    <link href="https://alphardex.github.io/mygo/posts/17935/"/>
    <id>https://alphardex.github.io/mygo/posts/17935/</id>
    <published>2024-03-28T00:24:49.000Z</published>
    <updated>2024-05-21T12:46:11.524Z</updated>
    
    
    <summary type="html">&lt;p&gt;这里是 alphardex。&lt;/p&gt;
&lt;p&gt;最近看到有小伙伴发了一个小米 SU7 的展示网页，那是相当的酷炫：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/03/28/NBucKfVrZM3FD71.png&quot; alt=&quot;intro&quot;&gt;&lt;/p&gt;
&lt;p&gt;光看上面的图可能看不出来什么，请直接访问原网页：&lt;a href=&quot;https://gamemcu.com/su7/&quot;&gt;https://gamemcu.com/su7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当你体验一遍后，会看到各种炫酷的效果，包括隧道穿梭、波浪动画等，并且还有些细节也值得注意，如地面的反射效果。&lt;/p&gt;
&lt;p&gt;那么这个网页是用哪个技术实现的呢？答案是&lt;code&gt;three.js&lt;/code&gt;，不论是从控制台，还是一些技术解析插件都能得知。&lt;/p&gt;
&lt;p&gt;但是，这里我要研究的重点却并非&lt;code&gt;three.js&lt;/code&gt;本身。仅仅用&lt;code&gt;three.js&lt;/code&gt;展示一个&lt;code&gt;3D&lt;/code&gt;模型，相信对大家来说并不是很难。真正的难点，是那些炫酷的效果是如何实现的。想要实现那些效果，就得靠&lt;code&gt;three.js&lt;/code&gt;背后的功臣——&lt;code&gt;Shader&lt;/code&gt;，也就是着色器。&lt;/p&gt;
&lt;p&gt;为了进一步地加强&lt;code&gt;three.js&lt;/code&gt;和&lt;code&gt;Shader&lt;/code&gt;的学习，我决定爆肝几天，亲手把那些炫酷的效果给还原出来。&lt;/p&gt;
&lt;p&gt;经过一定的努力，总算是写出来了。不多说，放地址：&lt;a href=&quot;https://su7-replica.netlify.app/&quot;&gt;https://su7-replica.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对整体流程做了一个简化：入场动画过后，无需长按，点击汽车即可直接进行冲刺（方便直接录制动图或视频），再次点击汽车即可取消冲刺，返回原来的状态。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一个普通魔法使的 2023 年终总结</title>
    <link href="https://alphardex.github.io/mygo/posts/57476/"/>
    <id>https://alphardex.github.io/mygo/posts/57476/</id>
    <published>2023-12-06T01:34:54.000Z</published>
    <updated>2024-05-21T12:46:13.654Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;一年时间过的如此之快，又到了总结的时候了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>尝试用 three.js 实现了这个跨窗口的粒子动画</title>
    <link href="https://alphardex.github.io/mygo/posts/2819/"/>
    <id>https://alphardex.github.io/mygo/posts/2819/</id>
    <published>2023-11-27T08:25:16.000Z</published>
    <updated>2024-05-21T12:46:15.379Z</updated>
    
    
    <summary type="html">&lt;p&gt;相信不久前大家已经被这个粒子动画给刷屏了吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/27/uvFLrXDKYHa1Ppl.png&quot; alt=&quot;bcab9963-4461-4964-96a0-214a15626f75&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前看过很多人都在分析跟这个效果相关的跨窗口通信技术，尽管这样是挺好，但我依旧有点纳闷：为什么没有人讲讲背后的粒子特效是怎么实现的呢？&lt;/p&gt;
&lt;p&gt;于是乎，我花了一整个周末，把这个粒子特效给肝了出来。尽管可能跟原特效相比有一点差距，但也表明了这种效果是可以实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/11/27/KqNm5ITYWidblpH.gif&quot; alt=&quot;entangled&quot;&gt;&lt;/p&gt;
&lt;p&gt;在线体验：&lt;a href=&quot;https://entangled-fxhash.netlify.app/&quot;&gt;https://entangled-fxhash.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文就让我们来看看实现这个粒子特效有哪些要点吧~&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>原神，启动！three.js 复刻原神登录界面技术浅析</title>
    <link href="https://alphardex.github.io/mygo/posts/10700/"/>
    <id>https://alphardex.github.io/mygo/posts/10700/</id>
    <published>2023-10-16T00:45:10.000Z</published>
    <updated>2024-05-21T12:46:14.501Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前看到有人在浏览器端复刻了原神的登录界面，效果非常还原。&lt;/p&gt;
&lt;p&gt;本文就让我们一起来看看这种效果是如何实现的，主要分析&lt;code&gt;Shader&lt;/code&gt;相关的部分。&lt;/p&gt;
&lt;p&gt;怀着学习的目的，我自己也写了一版，观看地址：&lt;a href=&quot;https://genshin-replica.miaohezi.com/&quot;&gt;https://genshin-replica.miaohezi.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/10/16/IK3H2qUd4o7BiEn.png&quot; alt=&quot;b86976a6-1228-4658-bae1-5b842e588206&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何美化一个 three.js 的场景渲染</title>
    <link href="https://alphardex.github.io/mygo/posts/44091/"/>
    <id>https://alphardex.github.io/mygo/posts/44091/</id>
    <published>2023-03-13T05:20:58.000Z</published>
    <updated>2024-05-21T12:46:14.978Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;在使用 three.js 开发时，有时会感觉场景的渲染不是非常美观，本文就来一步一步地将一个不是很美观的场景重新焕发它的生机。&lt;/p&gt;
&lt;p&gt;场景美化前：&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2023/03/13/V1T6srfquQcExZH.png&quot; alt=&quot;before.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;场景美化后：&lt;br&gt;&lt;img src=&quot;https://s2.loli.net/2023/03/13/BXtsu21gZnMKS56.png&quot; alt=&quot;after.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 three.js 渲染真实的下雨效果</title>
    <link href="https://alphardex.github.io/mygo/posts/5999/"/>
    <id>https://alphardex.github.io/mygo/posts/5999/</id>
    <published>2023-02-15T08:23:21.000Z</published>
    <updated>2024-05-21T12:46:18.029Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;最近我用 three.js 模拟了一下现实中的下雨效果，让我们一起来看看它是怎么实现的吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.juejin.cn/pen/7200287096689393720&quot;&gt;https://code.juejin.cn/pen/7200287096689393720&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>中二魔法使的 2022 年终总结</title>
    <link href="https://alphardex.github.io/mygo/posts/2989/"/>
    <id>https://alphardex.github.io/mygo/posts/2989/</id>
    <published>2023-01-01T03:29:00.000Z</published>
    <updated>2024-05-23T02:18:40.425Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;一年是如此的短暂，是时候来场总结了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 three.js 创造时空裂缝特效</title>
    <link href="https://alphardex.github.io/mygo/posts/11844/"/>
    <id>https://alphardex.github.io/mygo/posts/11844/</id>
    <published>2022-11-21T06:48:00.000Z</published>
    <updated>2024-05-22T00:24:45.581Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/05/22/jOlc4aJW1kXuz7M.jpg&quot; alt=&quot;Snipaste_2022-11-21_22-35-00.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近受到轮回系作品&lt;a href=&quot;https://www.agemys.net/detail/20200118&quot;&gt;《寒蝉鸣泣之时》&lt;/a&gt;中时空裂缝场景的启发，我用 three.js 实现了一个实时渲染的时空裂缝场景。本文将简要地介绍下实现该效果的要点。&lt;/p&gt;
&lt;p&gt;以下特效全屏观看效果最佳~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.juejin.cn/pen/7168065415069827124&quot;&gt;https://code.juejin.cn/pen/7168065415069827124&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文字与气泡与粒子特效——玩转 three.js 的表面采样</title>
    <link href="https://alphardex.github.io/mygo/posts/8412/"/>
    <id>https://alphardex.github.io/mygo/posts/8412/</id>
    <published>2022-11-10T01:51:00.000Z</published>
    <updated>2024-05-21T12:46:16.376Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://threejs.org/docs/#examples/en/math/MeshSurfaceSampler&quot;&gt;MeshSurfaceSampler&lt;/a&gt;，是 three.js 的表面采样器，通过它，我们可以在一个&lt;code&gt;Mesh&lt;/code&gt;的表面拾取一定数量的随机点位，从而实现一些炫酷的粒子特效，请看以下的效果（全屏最佳）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.juejin.cn/pen/7164008029766025223&quot;&gt;https://code.juejin.cn/pen/7164008029766025223&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文将简要地介绍一下实现这个效果的思路&lt;/p&gt;
&lt;p&gt;PS：本文标题 neta 了&lt;a href=&quot;https://bangumi.tv/subject/328609&quot;&gt;《孤独摇滚》&lt;/a&gt;的 live 曲&lt;a href=&quot;https://www.bilibili.com/video/BV1sv4y1U7j6/?spm_id_from=333.337.search-card.all.click&quot;&gt;《吉他与孤独与蓝色星球》&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>液晶球回归——HTML 与 Raymarching 的结晶</title>
    <link href="https://alphardex.github.io/mygo/posts/54631/"/>
    <id>https://alphardex.github.io/mygo/posts/54631/</id>
    <published>2022-11-04T00:58:00.000Z</published>
    <updated>2024-05-23T01:59:11.884Z</updated>
    
    
    <summary type="html">&lt;p&gt;呀哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;之前我写过一篇&lt;a href=&quot;https://juejin.cn/post/6967162668595544095&quot;&gt;液晶球相关的文章&lt;/a&gt;，里面是用顶点着色器和片元着色器来实现液晶球效果的，不过呢，之前同样写过一篇&lt;a href=&quot;https://juejin.cn/post/6934461126977519629&quot;&gt;Raymarching 相关的文章&lt;/a&gt;，于是乎我在想能不能把这两种方法给结合起来，实现一个第二版的液晶球呢，经过几天的实验，最终写出了如下的效果（全屏打开最佳）：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.juejin.cn/pen/7161774000031399943&quot;&gt;https://code.juejin.cn/pen/7161774000031399943&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文将简要地介绍一下实现这个效果的思路&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蒜物语——HTML 与 WebGL 的融合之旅</title>
    <link href="https://alphardex.github.io/mygo/posts/8368/"/>
    <id>https://alphardex.github.io/mygo/posts/8368/</id>
    <published>2022-10-29T07:52:00.000Z</published>
    <updated>2024-05-21T12:46:19.016Z</updated>
    
    
    <summary type="html">&lt;p&gt;哟哈喽！这里是 alphardex。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.agemys.net/detail/20220142&quot;&gt;Lycoris Recoil&lt;/a&gt;，又称“莉可丽丝”或“石蒜”，是笔者最近追完的一部番。这部番主要还是看美少女贴贴的日常，不论是 OP 的击股之交，泷奈的 Sakana~还是千束神一般的闪避能力等都令我记忆犹新。尽管后面几集剧情可能有点争议，但不影响我对这部番的喜爱。&lt;/p&gt;
&lt;p&gt;目前还有在追的一部新番&lt;a href=&quot;https://www.agemys.net/detail/20220121&quot;&gt;孤独摇滚&lt;/a&gt;也不错，女主社恐的性格真的跟我十分相似（悲）。&lt;/p&gt;
&lt;p&gt;最近我心血来潮，想为石蒜这部动画做一个自制的人物介绍页面，素材借用的是&lt;a href=&quot;https://lycoris-recoil.com/character/&quot;&gt;动画官网的素材&lt;/a&gt;，原本想做一个简单的包含 CSS 动画的 Swiper 滑动展示页，但转念一想，既然一直在研究 WebGL，为何不搞点更炫的东西呢？于是乎，借助我的框架&lt;a href=&quot;https://github.com/alphardex/kokomi.js&quot;&gt;kokomi.js&lt;/a&gt;之力，我成功地将一个普通的 HTML 页面一步步地转化为了一个拥有酷炫交互的 WebGL 页面。&lt;/p&gt;
&lt;p&gt;页面链接在下方，点击右上的 logo 全屏观看，效果最佳：&lt;br&gt;&lt;a href=&quot;https://code.juejin.cn/pen/7159562292110032900&quot;&gt;https://code.juejin.cn/pen/7159562292110032900&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文并不会详细地去教大家如何完整地做出整个页面的效果，而是来谈谈 HTML 转 WebGL 的方法以及 WebGL 特效的一些常用技法。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 kokomi.js 打造飘逸的 3D 轮播效果</title>
    <link href="https://alphardex.github.io/mygo/posts/29621/"/>
    <id>https://alphardex.github.io/mygo/posts/29621/</id>
    <published>2022-09-12T09:04:00.000Z</published>
    <updated>2024-05-21T12:46:17.302Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。本文就让我们来用&lt;a href=&quot;https://github.com/alphardex/kokomi.js&quot;&gt;kokomi.js&lt;/a&gt;实现一个飘逸的 3D 轮播效果。&lt;/p&gt;
&lt;p&gt;（以下 demo 点开全屏观看效果最佳）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.juejin.cn/pen/7141175290247512068&quot;&gt;https://code.juejin.cn/pen/7141175290247512068&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>将 Shadertoy 上的特效移植为桌面壁纸</title>
    <link href="https://alphardex.github.io/mygo/posts/11232/"/>
    <id>https://alphardex.github.io/mygo/posts/11232/</id>
    <published>2022-06-19T03:23:00.000Z</published>
    <updated>2024-05-21T12:46:15.165Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。本文就让我们来用&lt;a href=&quot;https://github.com/alphardex/kokomi.js&quot;&gt;kokomi.js&lt;/a&gt;的&lt;a href=&quot;https://github.com/alphardex/kokomi.js#shader-toy-tag&quot;&gt;shadertoy 组件&lt;/a&gt;将 Shadertoy 上的炫酷特效移植到我们的桌面上~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/19/gR7NwvcCIs6Ezfn.gif&quot; alt=&quot;aurora.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 raymarching 画一个精灵球</title>
    <link href="https://alphardex.github.io/mygo/posts/58379/"/>
    <id>https://alphardex.github.io/mygo/posts/58379/</id>
    <published>2022-04-13T07:46:00.000Z</published>
    <updated>2024-05-22T12:48:56.067Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。本文就让我们来用&lt;a href=&quot;https://github.com/alphardex/kokomi.js&quot;&gt;kokomi.js&lt;/a&gt;的&lt;a href=&quot;https://github.com/alphardex/marcher.js&quot;&gt;raymarching 组件&lt;/a&gt;来画一个精灵球吧~&lt;/p&gt;
&lt;p&gt;泼给莫，给托打贼！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2024/05/22/Pk2d4hmnUBCeFSj.gif&quot; alt=&quot;LKobMF.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 kokomi.js 写一个粉碎弹珠的小游戏</title>
    <link href="https://alphardex.github.io/mygo/posts/17777/"/>
    <id>https://alphardex.github.io/mygo/posts/17777/</id>
    <published>2022-04-05T06:14:02.000Z</published>
    <updated>2024-05-22T12:48:56.066Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。本文就让我们来用&lt;a href=&quot;https://github.com/alphardex/kokomi.js&quot;&gt;kokomi.js&lt;/a&gt;实现一个非常经典的物理游戏——粉碎弹珠（&lt;a href=&quot;https://baike.baidu.com/item/Smash%20Hit/13212932?fr=aladdin&quot;&gt;Smash Hit&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;游戏中你将成为一颗弹珠，通过弹射来粉碎面前的一切障碍物，特别适合用来解压。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>kokomi.js——Web 3D 创作的得力助手</title>
    <link href="https://alphardex.github.io/mygo/posts/56558/"/>
    <id>https://alphardex.github.io/mygo/posts/56558/</id>
    <published>2022-03-24T05:21:00.000Z</published>
    <updated>2024-05-22T12:48:56.050Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大家好，这里是 CSS 兼 WebGL 魔法使——alphardex。本文我们将认识一位新的小伙伴——&lt;a href=&quot;https://github.com/alphardex/kokomi.js&quot;&gt;kokomi.js&lt;/a&gt;，她能带给大家绝赞的 3D 创作体验~&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
